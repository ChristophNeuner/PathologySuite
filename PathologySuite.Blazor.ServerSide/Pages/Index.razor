@page "/"
@using System.Xml.Linq
@using System.Text
@using PathologySuite.Shared.Core.Interfaces
@using System.IO
@using PathologySuite.Shared.Models
@using PathologySuite.Shared.Options
@using RabbitMQ.Client
@using RabbitMQ.Client.Events

@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment _webHostEnvironment
@inject IJSRuntime _jsRuntime
@inject PathOptions _pathOptions
@inject PathologySuite.Shared.Services.Interfaces.IWsiStorageService _wsiStorageService
@inject PathologySuite.Shared.Services.WsiDbService _wsiDbService;


@foreach (WholeSlideImage wsi in wsis)
{
    byte[] thumbByteArray = wsiToThumbByteArray[wsi];
    string thumbBase64 = Convert.ToBase64String(thumbByteArray);
    string imgSrc = $"data:image/jpg;base64,{thumbBase64}";
    <img src="@imgSrc" />
    <button @onclick="@(() => SendToAI(wsi.PhysicalPathWsi))">send to AI</button>
}


@code{
    List<WholeSlideImage> wsis = new List<WholeSlideImage>();
    Dictionary<WholeSlideImage, byte[]> wsiToThumbByteArray = new Dictionary<WholeSlideImage, byte[]>();

    protected override async Task OnInitializedAsync()
    {
        wsis = await _wsiDbService.GetAsync();
        foreach(WholeSlideImage wsi in wsis)
        {
            byte[] thumbByteArray = await _wsiStorageService.GetThumbnailAsync(wsi);
            wsiToThumbByteArray.Add(wsi, thumbByteArray);
        }
    }

    private async Task SendToAI(string pathWsi)
    {
        await LogToBrowserConsole(pathWsi);

        // send message
        var factory = new ConnectionFactory() { HostName = "localhost" };
        using (var connection = factory.CreateConnection())
        using (var channel = connection.CreateModel())
        {
            string message = pathWsi;
            var body = Encoding.UTF8.GetBytes(message);

            var properties = channel.CreateBasicProperties();
            properties.Persistent = true;

            channel.BasicPublish(exchange: "PathologySuite.AI",
                             routingKey: "multiLabelClassification.pituitaryAdenomas.entities.newWork",
                             basicProperties: properties,
                             body: body);
        }

        await LogToBrowserConsole($"Sent: {pathWsi}");
    }

    private async Task LogToBrowserConsole(string message)
    {
        await _jsRuntime.InvokeAsync<string>("console.log", message);
    }
}

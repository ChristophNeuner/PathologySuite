@page "/"
@using System.Xml.Linq
@using System.Text
@using PathologySuite.Shared.Core.Interfaces
@using System.IO
@using PathologySuite.Shared.Core
@using PathologySuite.Shared.Options
@using RabbitMQ.Client
@using RabbitMQ.Client.Events

@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment _webHostEnvironment
@inject IJSRuntime JSRuntime
@inject PathOptions _pathOptions


@foreach (WholeSlideImage w in wsis)
{
    <img src="@w.WebRootPathThumbnail" />
    <button @onclick="@(() => SendToAI(w.PhysicalPathWsi))">send to AI</button>
}


@code{
    List<WholeSlideImage> wsis = new List<WholeSlideImage>();

    protected override async Task OnInitializedAsync()
    {

        //var thumbnailNames = Directory.GetFiles($@"{_webHostEnvironment.WebRootPath}/{_pathOptions.WsiBaseFolderName}/", "*-thumbnail.jpg").Select(Path.GetFileName).ToList();
        //foreach (String n in thumbnailNames)
        //{
        //    string thumbnailPath = $@"/{_pathOptions.WsiBaseFolderName}/{n}";
        //    wsis.Add(new WholeSlideImage("", "", "", thumbnailPath));

        //    LogToBrowserConsole(thumbnailPath);
        //}

        string[] pathParts = new string[] { _webHostEnvironment.WebRootPath, _pathOptions.WsiBaseFolderName };
        List<string> all = Directory.GetFiles(Path.Combine(pathParts)).ToList();
        foreach (string s in all)
        {

            if (Path.GetExtension(s) == ".ndpi")
            {
                string pathThumb = s.Replace(".ndpi", "") + "-thumbnail.jpg";
                string[] partsWsi = s.Split(Path.DirectorySeparatorChar);
                string[] partsThumb = pathThumb.Split(Path.DirectorySeparatorChar);
                string webrootwsi = "/" + Path.Combine(partsWsi[^2..]).Replace(@"\", @"/");
                string webrootthumb = "/" + Path.Combine(partsThumb[^2..]).Replace(@"\", @"/");
                WholeSlideImage wsi = new WholeSlideImage(s, pathThumb, webrootwsi, webrootthumb);
                wsis.Add(wsi);

                LogToBrowserConsole(wsi.PhysicalPathWsi);

            }
        }
    }

    private async Task SendToAI(string pathWsi)
    {
        await LogToBrowserConsole(pathWsi);

        // send message
        var factory = new ConnectionFactory() { HostName = "localhost" };
        using (var connection = factory.CreateConnection())
        using (var channel = connection.CreateModel())
        {
            string message = pathWsi;
            var body = Encoding.UTF8.GetBytes(message);

            var properties = channel.CreateBasicProperties();
            properties.Persistent = true;

            channel.BasicPublish(exchange: "PathologySuite.AI",
                             routingKey: "multiLabelClassification.pituitaryAdenomas.entities.newWork",
                             basicProperties: properties,
                             body: body);
        }

        await LogToBrowserConsole($"Sent: {pathWsi}");
    }

    private async Task LogToBrowserConsole(string message)
    {
        await JSRuntime.InvokeAsync<string>("console.log", message);
    }
}
